//
//  Copyright (c) 2023 Dev Protocol
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
//

@use '@devprotocol/hashi';
@use 'sass-true/sass/true';

@include hashi.init {
  @include true.describe('Theme Token [module]') {
    @include true.it('should be able to check a token\'s validity') {
      $test: hashi.token-check('primary-200');
      @include true.assert-equal($test, true, true);
    }

    @include true.it('should be able to get a token') {
      $test: hashi.token-get('primary-400');
      $test2: hashi.token-get('accent-400');
      $test3: hashi.token-get('radius-small');
      $test4: hashi.token-get('body-size');
      @include true.assert-equal($test, var(--hs-theme-primary-400), true);
      @include true.assert-equal($test2, var(--hs-theme-accent-400), true);
      @include true.assert-equal($test3, var(--hs-theme-radius-small), true);
      @include true.assert-equal($test4, var(--hs-theme-body-size), true);
    }

    @include true.it('should be able to get a token\'s raw value') {
      $test: hashi.token-get-raw('primary-600');
      $test2: hashi.token-get-raw('accent-200');
      // TODO: Fix this in the next minor version.
      @include true.assert-equal($test, #c4c4c4, true); // Affected by dark mode (fsr)
      @include true.assert-equal($test2, #88aeff, true);
    }

    @include true.it('should be able to switch a token\'s value') {
      $test: hashi.token-switch(#e56c1a);
      $test2: hashi.token-switch('primary-200', #e56c1a);
      $test3: hashi.token-switch('invalid-token', #e56c1a);
      @include true.assert-equal($test, #e56c1a, true);
      @include true.assert-equal($test2, var(--hs-theme-primary-200), true);
      @include true.assert-equal($test3, #e56c1a, true);
    }

    @include true.it('should be able to switch a token\'s raw value') {
      $test: hashi.token-switch-raw(#e56c1a);
      $test2: hashi.token-switch-raw('primary-200', #e56c1a);
      $test3: hashi.token-switch-raw('invalid-token', #e56c1a);
      @include true.assert-equal($test, #e56c1a, true);
      @include true.assert-equal($test2, #ffffff, true);
      @include true.assert-equal($test3, #e56c1a, true);
    }

    @include true.it('should cofigure tokens as css variables') {
      @include true.assert {
        @include true.output {
          :root {
            @include hashi.token-config((
              'test': grey,
              'leveled-test': (
                default: #000,
                variant: 1.2rem
              )
            ));
          }
        }
        @include true.expect {
          :root {
            --hs-theme-test: grey;
            --hs-theme-leveled-test: #000;
            --hs-theme-leveled-test-variant: 1.2rem;
          }
        }
      }
    }
  }
}

@include true.report();