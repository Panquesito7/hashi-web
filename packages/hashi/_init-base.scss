//
//  Copyright (c) 2023 Dev Protocol
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
//

@use 'hs-core';
@use 'hs-core/tokens';

@use 'sass:map';
@use 'sass:list';
@use 'sass:selector';
@use 'sass:string';
@use 'sass:color';

@use 'init-font-pack' as font-pack;

$_valid-dark-modes: ('attribute', 'media', 'class', 'auto');

$primary: 'dp-black' !default;
$primary-dark: 'dp-white' !default;
$accent: 'native-blue' !default;
$accent-dark: $accent !default;
$surface: 'dp-white' !default;
$surface-dark: 'dp-blue-grey' !default;
$error: 'dp-red' !default;
$error-dark: $error !default;

$radius-small: 'sm' !default;
$radius-medium: 'md' !default;
$radius-large: 'lg' !default;

$supertitle: () !default;
$title: () !default;
$subtitle: () !default;
$body: () !default;
$mono: () !default;
$small: () !default;

$background: 'dp-white.200' !default;
$background-dark: 'dp-blue-grey.600' !default;
$background-ink: 'dp-white.ink' !default;
$background-dark-ink: 'dp-blue-grey.ink' !default;
$breakpoints: () !default;
$_init-breakpoints: (
  'small': 320px,
  'medium': 640px,
  'large': 960px,
  'xlarge': 1280px,
);

$dark-mode: 'attribute' !default;
$extend: () !default;
$theme: () !default;

$_primary: hs-core.prioritize(map.get($theme, 'primary'), $primary);
$_primary-dark: hs-core.prioritize(map.get($theme, 'primary-dark'), $primary-dark);
$_accent: hs-core.prioritize(map.get($theme, 'accent'), $accent);
$_accent-dark: hs-core.prioritize(map.get($theme, 'accent-dark'), $accent-dark);
$_surface: hs-core.prioritize(map.get($theme, 'surface'), $surface);
$_surface-dark: hs-core.prioritize(map.get($theme, 'surface-dark'), $surface-dark);
$_error: hs-core.prioritize(map.get($theme, 'error'), $error);
$_error-dark: hs-core.prioritize(map.get($theme, 'error-dark'), $error-dark);

$_background: hs-core.prioritize(map.get($theme, 'background'), $background);
$_background-dark: hs-core.prioritize(map.get($theme, 'background-dark'), $background-dark);
$_background-ink: hs-core.prioritize(map.get($theme, 'background-ink'), $background-ink);
$_background-dark-ink: hs-core.prioritize(map.get($theme, 'background-dark-ink'), $background-dark-ink);

$_radius-small: hs-core.prioritize(map.get($theme, 'radius-small'), $radius-small);
$_radius-medium: hs-core.prioritize(map.get($theme, 'radius-medium'), $radius-medium);
$_radius-large: hs-core.prioritize(map.get($theme, 'radius-large'), $radius-large);

$_supertitle: hs-core.prioritize(map.get($theme, 'supertitle'), $supertitle);
$_title: hs-core.prioritize(map.get($theme, 'title'), $title);
$_subtitle: hs-core.prioritize(map.get($theme, 'subtitle'), $subtitle);
$_body: hs-core.prioritize(map.get($theme, 'body'), $body);
$_mono: hs-core.prioritize(map.get($theme, 'mono'), $mono);
$_small: hs-core.prioritize(map.get($theme, 'small'), $small);

$_dark-mode: hs-core.prioritize(map.get($theme, 'dark-mode'), $dark-mode);
$_extend: hs-core.prioritize(map.get($theme, 'extend'), $extend);
$_breakpoints: hs-core.prioritize(map.get($theme, 'breakpoints'), $breakpoints);

$_tones: (
  200: 8%,
  300: 12%,
  400: 20%,
  600: 33%
);

@if not list.index($_valid-dark-modes, $_dark-mode) {
  @error "Invalid dark mode: #{$_dark-mode}. Please use one of the following dark modes: #{$_valid-dark-modes}.";
}

/// Duplicate dark mode mixin (current viable workaround as of now).
/// @access public
@mixin dark-mode {
  @if not list.index($_valid-dark-modes, $_dark-mode) {
    @error "Invalid dark mode: #{$dark-mode}. Please use one of the following dark modes: #{$_valid-dark-modes}.";
  }

  @if $_dark-mode == 'media' {
    @media (prefers-color-scheme: dark) {
      @content;
    }
  }

  @if $_dark-mode == 'attribute' {
    @at-root #{selector.nest('html[hashi-theme="dark"], html[data-theme="dark"], html[theme="dark"]', &)} {
      @content;
    }
  }

  @if $_dark-mode == 'class' {
    @at-root #{selector.nest('html.is-dark', &)} {
      @content;
    }
  }

  @if $_dark-mode == 'auto' {
    @at-root #{selector.nest('html[hashi-theme="dark"], html[data-theme="dark"], html[theme="dark"], html.is-dark', &)} {
      @content;
    }

    @media (prefers-color-scheme: dark) {
      @at-root #{selector.nest('html:not([hashi-theme="light"]), html:not([data-theme="light"]), html:not([theme="light"]), html:not(.is-light)', &)} {
        @content;
      }
    }
  }
}

@mixin init {
  /// itp = initial typography presets
  /// @access private
  $_itp: (
    'supertitle': (
      family: ('Syne', sans-serif),
      size: '2xl',
      weight: 900,
      line-height: 'normal'
    ),
    'title': (
      family: ('Syne', sans-serif),
      size: 'xl',
      weight: 700,
      line-height: 'normal'
    ),
    'subtitle': (
      family: ('Syne', sans-serif),
      size: 'lg',
      weight: 700,
      line-height: 'normal'
    ),
    'body': (
      family: ('DM Sans', sans-serif),
      size: 'sm',
      weight: 400,
      line-height: 'normal'
    ),
    'mono': (
      family: ('IBM Plex Mono', monospace),
      size: 'sm',
      weight: 400,
      line-height: 'normal'
    ),
    'small': (
      family: ('DM Sans', sans-serif),
      size: 'xs',
      weight: 200,
      line-height: 'normal'
    )
  );

  :root {
    @include hs-core.token-config($map: $_extend);
    @include hs-core.token-config(
      $primary: (
        200: _get-color($_primary, 200),
        300: _get-color($_primary, 300),
        400: _get-color($_primary, 400),
        600: _get-color($_primary, 600),
        'ink': _get-color($_primary, 'ink'),
        'dark': (
          200: _get-color($_primary-dark, 200),
          300: _get-color($_primary-dark, 300),
          400: _get-color($_primary-dark, 400),
          600: _get-color($_primary-dark, 600),
          'ink': _get-color($_primary-dark, 'ink')
        ),
      ),
      $accent: (
        200: _get-color($_accent, 200),
        300: _get-color($_accent, 300),
        400: _get-color($_accent, 400),
        600: _get-color($_accent, 600),
        'ink': _get-color($_accent, 'ink'),
        'dark': (
          200: _get-color($_accent-dark, 200),
          300: _get-color($_accent-dark, 300),
          400: _get-color($_accent-dark, 400),
          600: _get-color($_accent-dark, 600),
          'ink': _get-color($_accent-dark, 'ink')
        ),
      ),
      $surface: (
        200: _get-color($_surface, 200),
        300: _get-color($_surface, 300),
        400: _get-color($_surface, 400),
        600: _get-color($_surface, 600),
        'ink': _get-color($_surface, 'ink'),
        'dark': (
          200: _get-color($_surface-dark, 200),
          300: _get-color($_surface-dark, 300),
          400: _get-color($_surface-dark, 400),
          600: _get-color($_surface-dark, 600),
          'ink': _get-color($_surface-dark, 'ink')
        ),
      ),
      $error: (
        200: _get-color($_error, 200),
        300: _get-color($_error, 300),
        400: _get-color($_error, 400),
        600: _get-color($_error, 600),
        'ink': _get-color($_error, 'ink'),
        'dark': (
          200: _get-color($_error-dark, 200),
          300: _get-color($_error-dark, 300),
          400: _get-color($_error-dark, 400),
          600: _get-color($_error-dark, 600),
          'ink': _get-color($_error-dark, 'ink')
        ),
      ),
      $disabled: (
        'default': hs-core.primitive-token-get('dp-black-alpha.default'),
        'ink': hs-core.primitive-token-get('dp-black-alpha.ink')
      ),
      $background: (
        'default': hs-core.token-switch($_background, hs-core.primitive-token-switch($_background)),
        'ink': hs-core.token-switch($_background-ink, hs-core.primitive-token-switch($_background-ink)),
        'dark': (
          'default': hs-core.primitive-token-get($_background-dark),
          'ink': hs-core.primitive-token-get($_background-dark-ink),
        ),
      ),
      $radius: (
        'small': hs-core.primitive-token-switch('radius.#{$_radius-small}', $_radius-small),
        'medium': hs-core.primitive-token-switch('radius.#{$_radius-medium}', $_radius-medium),
        'large': hs-core.primitive-token-switch('radius.#{$_radius-large}', $_radius-large),
      ),
      $supertitle: (
        'family': _get-family(map.merge(map.get($_itp, 'supertitle'), $_supertitle)),
        'size': _get-size(map.merge(map.get($_itp, 'supertitle'), $_supertitle)),
        'weight': _get-weight(map.merge(map.get($_itp, 'supertitle'), $_supertitle)),
        'line-height': _get-line-height(map.merge(map.get($_itp, 'supertitle'), $_supertitle)),
      ),
      $title: (
        'family': _get-family(map.merge(map.get($_itp, 'title'), $_title)),
        'size': _get-size(map.merge(map.get($_itp, 'title'), $_title)),
        'weight': _get-weight(map.merge(map.get($_itp, 'title'), $_title)),
        'line-height': _get-line-height(map.merge(map.get($_itp, 'title'), $_title)),
      ),
      $subtitle: (
        'family': _get-family(map.merge(map.get($_itp, 'subtitle'), $_subtitle)),
        'size': _get-size(map.merge(map.get($_itp, 'subtitle'), $_subtitle)),
        'weight': _get-weight(map.merge(map.get($_itp, 'subtitle'), $_subtitle)),
        'line-height': _get-line-height(map.merge(map.get($_itp, 'subtitle'), $_subtitle)),
      ),
      $body: (
        'family': _get-family(map.merge(map.get($_itp, 'body'), $_body)),
        'size': _get-size(map.merge(map.get($_itp, 'body'), $_body)),
        'weight': _get-weight(map.merge(map.get($_itp, 'body'), $_body)),
        'line-height': _get-line-height(map.merge(map.get($_itp, 'body'), $_body)),
      ),
      $mono: (
        'family': _get-family(map.merge(map.get($_itp, 'mono'), $_mono)),
        'size': _get-size(map.merge(map.get($_itp, 'mono'), $_mono)),
        'weight': _get-weight(map.merge(map.get($_itp, 'mono'), $_mono)),
        line-height: _get-line-height(map.merge(map.get($_itp, 'mono'), $_mono)),
      ),
      $small: (
        'family': _get-family(map.merge(map.get($_itp, 'small'), $_small)),
        'size': _get-size(map.merge(map.get($_itp, 'small'), $_small)),
        'weight': _get-weight(map.merge(map.get($_itp, 'small'), $_small)),
        'line-height': _get-line-height(map.merge(map.get($_itp, 'small'), $_small)),
      ),
    );
    @include hs-core.token-config(
      $primary-alpha: (
        200: rgba(_raw('primary-200'), 8%),
        300: rgba(_raw('primary-300'), 12%),
        400: rgba(_raw('primary-400'), 20%),
        600: rgba(_raw('primary-600'), 33%)
      ),
      $accent-alpha: (
        200: rgba(_raw('accent-200'), 8%),
        300: rgba(_raw('accent-300'), 12%),
        400: rgba(_raw('accent-400'), 20%),
        600: rgba(_raw('accent-600'), 33%)
      ),
      $surface-alpha: (
        200: rgba(_raw('surface-200'), 8%),
        300: rgba(_raw('surface-300'), 12%),
        400: rgba(_raw('surface-400'), 20%),
        600: rgba(_raw('surface-600'), 33%)
      ),
    );
    --hs-transition-time: 0.2s;
    --hs-shadow-color: #{rgba(#000, 15%)};
  }

  @include hs-core.breakpoint-config(
    $map: map.merge($_init-breakpoints, $_breakpoints)
  );

  @include font-pack.load((
    'supertitle': _get-family(map.merge(map.get($_itp, 'supertitle'), $_supertitle)),
    'title': _get-family(map.merge(map.get($_itp, 'title'), $_title)),
    'subtitle': _get-family(map.merge(map.get($_itp, 'subtitle'), $_subtitle)),
    'body': _get-family(map.merge(map.get($_itp, 'body'), $_body)),
    'mono': _get-family(map.merge(map.get($_itp, 'mono'), $_mono)),
    'small': _get-family(map.merge(map.get($_itp, 'small'), $_small)),
  ));

  @if $_dark-mode == 'media' {
    @media (prefers-color-scheme: dark) {
      :root {
        color-scheme: dark;
        @include hs-core.token-config(
          $primary: (
            200: hs-core.token-get('primary-dark-200'),
            300: hs-core.token-get('primary-dark-300'),
            400: hs-core.token-get('primary-dark-400'),
            600: hs-core.token-get('primary-dark-600'),
            'ink': hs-core.token-get('primary-dark-ink'),
            'alpha': (
              200: rgba(_raw('primary-dark-200'), 8%),
              300: rgba(_raw('primary-dark-300'), 12%),
              400: rgba(_raw('primary-dark-400'), 20%),
              600: rgba(_raw('primary-dark-600'), 33%)
            ),
          ),
          $accent: (
            200: hs-core.token-get('accent-dark-200'),
            300: hs-core.token-get('accent-dark-300'),
            400: hs-core.token-get('accent-dark-400'),
            600: hs-core.token-get('accent-dark-600'),
            'ink': hs-core.token-get('accent-dark-ink'),
            'alpha': (
              200: rgba(_raw('accent-dark-200'), 8%),
              300: rgba(_raw('accent-dark-300'), 12%),
              400: rgba(_raw('accent-dark-400'), 20%),
              600: rgba(_raw('accent-dark-600'), 33%)
            ),
          ),
          $surface: (
            200: hs-core.token-get('surface-dark-200'),
            300: hs-core.token-get('surface-dark-300'),
            400: hs-core.token-get('surface-dark-400'),
            600: hs-core.token-get('surface-dark-600'),
            'ink': hs-core.token-get('surface-dark-ink'),
            'alpha': (
              200: rgba(_raw('surface-dark-200'), 8%),
              300: rgba(_raw('surface-dark-300'), 12%),
              400: rgba(_raw('surface-dark-400'), 20%),
              600: rgba(_raw('surface-dark-600'), 33%)
            ),
          ),
          $disabled: (
            'default': hs-core.primitive-token-get('dp-white-alpha.default'),
            'ink': hs-core.primitive-token-get('dp-white-alpha.ink'),
          ),
          $background: (
            'default': hs-core.token-get('background-dark'),
            'ink': hs-core.token-get('background-dark-ink'),
          ),
        );
      }
    }
  }

  *,
  :before,
  :after {
    margin: 0;
    padding: 0;
    color: inherit;
    box-sizing: inherit;
    // border: 1px solid rgba(0 0 0 / 0);
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    font-family: inherit;
    font-size: inherit;
    font-weight: inherit;
    line-height: inherit;
  }

  p,
  span,
  a {
    font-family: hs-core.token-get('body-family');
    font-size: hs-core.token-get('body-size');
    font-weight: hs-core.token-get('body-weight');
    line-height: hs-core.token-get('body-line-height');
  }

  a {
    text-decoration: none;
  }

  li {
    list-style: none;
  }

  small {
    font-family: hs-core.token-get('small-family');
    font-size: hs-core.token-get('small-size');
    font-weight: hs-core.token-get('small-weight');
    line-height: hs-core.token-get('small-line-height');
  }

  code,
  code * {
    font-family: hs-core.token-get('mono-family');
    font-size: hs-core.token-get('mono-size');
    font-weight: hs-core.token-get('mono-weight');
    line-height: hs-core.token-get('mono-line-height');
  }

  dialog {
    all: unset;
  }

  html {
    width: 100%;
    height: 100%;
    font-size: 100%;
    background: hs-core.token-get('background');
    color: hs-core.token-get('background-ink');
    font-family: hs-core.token-get('body-family');
    box-sizing: border-box;
    color-scheme: light;

    @if $_dark-mode == 'class' {
      &.is-dark {
        color-scheme: dark;
        @include hs-core.token-config(
          $primary: (
            200: hs-core.token-get('primary-dark-200'),
            300: hs-core.token-get('primary-dark-300'),
            400: hs-core.token-get('primary-dark-400'),
            600: hs-core.token-get('primary-dark-600'),
            'ink': hs-core.token-get('primary-dark-ink'),
            'alpha': (
              200: rgba(_raw('primary-dark-200'), 8%),
              300: rgba(_raw('primary-dark-300'), 12%),
              400: rgba(_raw('primary-dark-400'), 20%),
              600: rgba(_raw('primary-dark-600'), 33%)
            ),
          ),
          $accent: (
            200: hs-core.token-get('accent-dark-200'),
            300: hs-core.token-get('accent-dark-300'),
            400: hs-core.token-get('accent-dark-400'),
            600: hs-core.token-get('accent-dark-600'),
            'ink': hs-core.token-get('accent-dark-ink'),
            'alpha': (
              200: rgba(_raw('accent-dark-200'), 8%),
              300: rgba(_raw('accent-dark-300'), 12%),
              400: rgba(_raw('accent-dark-400'), 20%),
              600: rgba(_raw('accent-dark-600'), 33%)
            ),
          ),
          $surface: (
            200: hs-core.token-get('surface-dark-200'),
            300: hs-core.token-get('surface-dark-300'),
            400: hs-core.token-get('surface-dark-400'),
            600: hs-core.token-get('surface-dark-600'),
            'ink': hs-core.token-get('surface-dark-ink'),
            'alpha': (
              200: rgba(_raw('surface-dark-200'), 8%),
              300: rgba(_raw('surface-dark-300'), 12%),
              400: rgba(_raw('surface-dark-400'), 20%),
              600: rgba(_raw('surface-dark-600'), 33%)
            ),
          ),
          $disabled: (
            'default': hs-core.primitive-token-get('dp-white-alpha'),
            'ink': hs-core.primitive-token-get('dp-white-alpha.ink')
          ),
          $background: (
            'default': hs-core.token-get('background-dark'),
            'ink': hs-core.token-get('background-dark-ink'),
          ),
        );
      }
    }

    @if $_dark-mode == 'attribute' {
      &[hashi-theme='dark'],
      &[theme='dark'],
      &[data-theme='dark'] {
        color-scheme: dark;
        @include hs-core.token-config(
          $primary: (
            200: hs-core.token-get('primary-dark-200'),
            300: hs-core.token-get('primary-dark-300'),
            400: hs-core.token-get('primary-dark-400'),
            600: hs-core.token-get('primary-dark-600'),
            'ink': hs-core.token-get('primary-dark-ink'),
            'alpha': (
              200: rgba(_raw('primary-dark-200'), 8%),
              300: rgba(_raw('primary-dark-300'), 12%),
              400: rgba(_raw('primary-dark-400'), 20%),
              600: rgba(_raw('primary-dark-600'), 33%)
            ),
          ),
          $accent: (
            200: hs-core.token-get('accent-dark-200'),
            300: hs-core.token-get('accent-dark-300'),
            400: hs-core.token-get('accent-dark-400'),
            600: hs-core.token-get('accent-dark-600'),
            'ink': hs-core.token-get('accent-dark-ink'),
            'alpha': (
              200: rgba(_raw('accent-dark-200'), 8%),
              300: rgba(_raw('accent-dark-300'), 12%),
              400: rgba(_raw('accent-dark-400'), 20%),
              600: rgba(_raw('accent-dark-600'), 33%)
            ),
          ),
          $surface: (
            200: hs-core.token-get('surface-dark-200'),
            300: hs-core.token-get('surface-dark-300'),
            400: hs-core.token-get('surface-dark-400'),
            600: hs-core.token-get('surface-dark-600'),
            'ink': hs-core.token-get('surface-dark-ink'),
            'alpha': (
              200: rgba(_raw('surface-dark-200'), 8%),
              300: rgba(_raw('surface-dark-300'), 12%),
              400: rgba(_raw('surface-dark-400'), 20%),
              600: rgba(_raw('surface-dark-600'), 33%)
            ),
          ),
          $disabled: (
            'default': hs-core.primitive-token-get('dp-white-alpha.default'),
            'ink': hs-core.primitive-token-get('dp-white-alpha.ink')
          ),
          $background: (
            'default': hs-core.token-get('background-dark'),
            'ink': hs-core.token-get('background-dark-ink'),
          ),
        );
      }
    }
  }

  @content;
}

@function _get-color($query, $tone) {
  @return hs-core.token-switch('#{$query}-#{$tone}', hs-core.primitive-token-switch('#{$query}.#{$tone}', $query))
}

@function _get-family($query) {
  @return hs-core.primitive-token-switch('family.#{map.get($query, 'family')}', map.get($query, 'family'));
}

@function _get-size($query) {
  @return hs-core.primitive-token-switch('size.#{map.get($query, 'size')}', map.get($query, 'size'));
}

@function _get-weight($query) {
  @return hs-core.primitive-token-switch('weight.#{map.get($query, 'weight')}', map.get($query, 'weight'));
}

@function _get-line-height($query) {
  @return hs-core.primitive-token-switch('line-height.#{map.get($query, 'line-height')}', map.get($query, 'line-height'));
}

@function _raw($query) {
  @return hs-core.token-switch-raw($query, hs-core.primitive-token-switch($query));
}