///
//  Copyright (c) 2022 Dev Protocol
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
///

@use 'hs-core';
@use 'hs-core/tokens';

@use 'sass:map';
@use 'sass:list';
@use 'sass:selector';
@use 'sass:string';

@use 'init-font-pack' as font-pack;

$_valid-dark-modes: ('attribute', 'media', 'class');

$primary: 'dp-black' !default;
$primary-dark: 'dp-white' !default;
$accent: 'native-blue' !default;
$accent-dark: $accent !default;
$surface: 'dp-white' !default;
$surface-dark: 'dp-blue-grey' !default;

$radius-small: 'radius-xs' !default;
$radius-medium: 'radius-sm' !default;
$radius-large: 'radius-md' !default;

$family-supertitle: ('Syne', sans-serif, 800) !default;
$family-title: ('Syne', sans-serif, 700) !default;
$family-subtitle: ('Syne', sans-serif, 700) !default;
$family-body: ('DM Sans', sans-serif, 400) !default;
$family-mono: ('IBM Plex Mono', monospace, 400) !default;
$family-small: ('DM Sans', sans-serif, 300) !default;

$background: 'surface-200' !default;
$dark-background: 'surface-400' !default;
$background-ink: 'surface-ink' !default;
$dark-background-ink: $background-ink !default;
$breakpoints: () !default;
$_init-breakpoints: (
  'small': 320px,
  'medium': 640px,
  'large': 960px,
  'xlarge': 1280px,
);

$dark-mode: 'attribute' !default;
$extend: () !default;
$theme: () !default;

$_primary: hs-core.prioritize(map.get($theme, 'primary'), $primary);
$_primary-dark: hs-core.prioritize(map.get($theme, 'primary-dark'), $primary-dark);
$_accent: hs-core.prioritize(map.get($theme, 'accent'), $accent);
$_accent-dark: hs-core.prioritize(map.get($theme, 'accent-dark'), $accent-dark);
$_surface: hs-core.prioritize(map.get($theme, 'surface'), $surface);
$_surface-dark: hs-core.prioritize(map.get($theme, 'surface-dark'), $surface-dark);

$_background: hs-core.prioritize(map.get($theme, 'background'), $background);
$_dark-background: hs-core.prioritize(map.get($theme, 'dark-background'), $dark-background);
$_background-ink: hs-core.prioritize(map.get($theme, 'background-ink'), $background-ink);
$_dark-background-ink: hs-core.prioritize(map.get($theme, 'dark-background-ink'), $dark-background-ink);

$_radius-small: hs-core.prioritize(map.get($theme, 'radius-small'), $radius-small);
$_radius-medium: hs-core.prioritize(map.get($theme, 'radius-medium'), $radius-medium);
$_radius-large: hs-core.prioritize(map.get($theme, 'radius-large'), $radius-large);

$_family-supertitle: hs-core.prioritize(map.get($theme, 'family-supertitle'), $family-supertitle);
$_family-title: hs-core.prioritize(map.get($theme, 'family-title'), $family-title);
$_family-subtitle: hs-core.prioritize(map.get($theme, 'family-subtitle'), $family-subtitle);
$_family-body: hs-core.prioritize(map.get($theme, 'family-body'), $family-body);
$_family-mono: hs-core.prioritize(map.get($theme, 'family-mono'), $family-mono);
$_family-small: hs-core.prioritize(map.get($theme, 'family-small'), $family-small);

$_dark-mode: hs-core.prioritize(map.get($theme, 'dark-mode'), $dark-mode);
$_extend: hs-core.prioritize(map.get($theme, 'extend'), $extend);
$_breakpoints: hs-core.prioritize(map.get($theme, 'breakpoints'), $breakpoints);

$_tones: (
  200: 8%,
  300: 12%,
  400: 20%,
  600: 33%
);

@if not list.index($_valid-dark-modes, $_dark-mode) {
  @error "Invalid dark mode: #{$_dark-mode}. Please use one of the following dark modes: #{$_valid-dark-modes}.";
}

/// Duplicate dark mode mixin (current viable workaround as of now).
/// @access public
@mixin dark-mode {
  @if not list.index($_valid-dark-modes, $_dark-mode) {
    @error "Invalid dark mode: #{$dark-mode}. Please use one of the following dark modes: #{$_valid-dark-modes}.";
  }

  @if $_dark-mode == 'media' {
    @media (prefers-color-scheme: dark) {
      @content;
    }
  }

  @if $_dark-mode == 'attribute' {
    @at-root #{selector.nest('html[hashi-theme="dark"], html[data-theme="dark"], html[theme="dark"]', &)} {
      @content;
    }
  }

  @if $_dark-mode == 'class' {
    @at-root #{selector.nest('html.is-dark', &)} {
      @content;
    }
  }
}

@mixin init {
  :root {
    @include hs-core.token-config(
      $map: tokens.$hs-tokens,
      $primary: (
        200: 'var(--hs-theme-#{$_primary}-200)',
        300: 'var(--hs-theme-#{$_primary}-300)',
        400: 'var(--hs-theme-#{$_primary}-400)',
        600: 'var(--hs-theme-#{$_primary}-600)',
        'ink': 'var(--hs-theme-#{$_primary}-ink)',
        'dark': (
          200: 'var(--hs-theme-#{$_primary-dark}-200)',
          300: 'var(--hs-theme-#{$_primary-dark}-300)',
          400: 'var(--hs-theme-#{$_primary-dark}-400)',
          600: 'var(--hs-theme-#{$_primary-dark}-600)',
          'ink': 'var(--hs-theme-#{$_primary-dark}-ink)',
        ),
      ),
      $accent: (
        200: 'var(--hs-theme-#{$_accent}-200)',
        300: 'var(--hs-theme-#{$_accent}-300)',
        400: 'var(--hs-theme-#{$_accent}-400)',
        600: 'var(--hs-theme-#{$_accent}-600)',
        'ink': 'var(--hs-theme-#{$_accent}-ink)',
        'dark': (
          200: 'var(--hs-theme-#{$_accent-dark}-200)',
          300: 'var(--hs-theme-#{$_accent-dark}-300)',
          400: 'var(--hs-theme-#{$_accent-dark}-400)',
          600: 'var(--hs-theme-#{$_accent-dark}-600)',
          'ink': 'var(--hs-theme-#{$_accent-dark}-ink)',
        ),
      ),
      $surface: (
        200: 'var(--hs-theme-#{$_surface}-200)',
        300: 'var(--hs-theme-#{$_surface}-300)',
        400: 'var(--hs-theme-#{$_surface}-400)',
        600: 'var(--hs-theme-#{$_surface}-600)',
        'ink': 'var(--hs-theme-#{$_surface}-ink)',
        'dark': (
          200: 'var(--hs-theme-#{$_surface-dark}-200)',
          300: 'var(--hs-theme-#{$_surface-dark}-300)',
          400: 'var(--hs-theme-#{$_surface-dark}-400)',
          600: 'var(--hs-theme-#{$_surface-dark}-600)',
          'ink': 'var(--hs-theme-#{$_surface-dark}-ink)',
        ),
      ),
      $disabled: (
        'default': var(--hs-theme-dp-black-alpha),
        'ink': var(--hs-theme-dp-black-alpha-ink)
      ),
      $background: (
        'default': 'var(--hs-theme-#{$_background})',
        'ink': 'var(--hs-theme-#{$_background-ink})',
        'dark': (
          'default': 'var(--hs-theme-#{$_dark-background})',
          'ink': 'var(--hs-theme-#{$_dark-background-ink})',
        ),
      ),
      $radius: (
        'small': 'var(--hs-theme-#{$_radius-small})',
        'medium': 'var(--hs-theme-#{$_radius-medium})',
        'large': 'var(--hs-theme-#{$_radius-large})',
      ),
      $family: (
        'supertitle': _get-family($_family-supertitle),
        'title': _get-family($_family-title),
        'subtitle': _get-family($_family-subtitle),
        'body': _get-family($_family-body),
        'mono': _get-family($_family-mono),
        'small': _get-family($_family-small),
      ),
      $weight: (
        'supertitle': _get-weight($_family-supertitle),
        'title': _get-weight($_family-title),
        'subtitle': _get-weight($_family-subtitle),
        'body': _get-weight($_family-body),
        'mono': _get-weight($_family-mono),
        'small': _get-weight($_family-small),
      ),
    );
    @include hs-core.token-config($map: $_extend);
    @include hs-core.token-config(
      $primary-alpha: (
        200: rgba(_raw('#{$_primary}-200'), 8%),
        300: rgba(_raw('#{$_primary}-300'), 12%),
        400: rgba(_raw('#{$_primary}-400'), 20%),
        600: rgba(_raw('#{$_primary}-600'), 33%)
      ),
      $accent-alpha: (
        200: rgba(_raw('#{$_accent}-200'), 8%),
        300: rgba(_raw('#{$_accent}-300'), 12%),
        400: rgba(_raw('#{$_accent}-400'), 20%),
        600: rgba(_raw('#{$_accent}-600'), 33%)
      ),
      $surface-alpha: (
        200: rgba(_raw('#{$_surface}-200'), 8%),
        300: rgba(_raw('#{$_surface}-300'), 12%),
        400: rgba(_raw('#{$_surface}-400'), 20%),
        600: rgba(_raw('#{$_surface}-600'), 33%)
      ),
    );
    --hs-transition-time: 0.2s;
  }

  @include hs-core.breakpoint-config(
    $map: map.merge($_init-breakpoints, $_breakpoints)
  );

  @include font-pack.load((
    'supertitle': _get-family($_family-supertitle),
    'title': _get-family($_family-title),
    'subtitle': _get-family($_family-subtitle),
    'body': _get-family($_family-body),
    'mono': _get-family($_family-mono),
    'small': _get-family($_family-small),
  ));

  @if $_dark-mode == 'media' {
    @media (prefers-color-scheme: dark) {
      :root {
        color-scheme: dark;
        @include hs-core.token-config(
          $primary: (
            200: hs-core.token-get('primary-dark-200'),
            300: hs-core.token-get('primary-dark-300'),
            400: hs-core.token-get('primary-dark-400'),
            600: hs-core.token-get('primary-dark-600'),
            'ink': hs-core.token-get('primary-dark-ink'),
            'alpha': (
              200: rgba(_raw('primary-dark-200'), 8%),
              300: rgba(_raw('primary-dark-300'), 12%),
              400: rgba(_raw('primary-dark-400'), 20%),
              600: rgba(_raw('primary-dark-600'), 33%)
            ),
          ),
          $accent: (
            200: hs-core.token-get('accent-dark-200'),
            300: hs-core.token-get('accent-dark-300'),
            400: hs-core.token-get('accent-dark-400'),
            600: hs-core.token-get('accent-dark-600'),
            'ink': hs-core.token-get('accent-dark-ink'),
            'alpha': (
              200: rgba(_raw('accent-dark-200'), 8%),
              300: rgba(_raw('accent-dark-300'), 12%),
              400: rgba(_raw('accent-dark-400'), 20%),
              600: rgba(_raw('accent-dark-600'), 33%)
            ),
          ),
          $surface: (
            200: hs-core.token-get('surface-dark-200'),
            300: hs-core.token-get('surface-dark-300'),
            400: hs-core.token-get('surface-dark-400'),
            600: hs-core.token-get('surface-dark-600'),
            'ink': hs-core.token-get('surface-dark-ink'),
            'alpha': (
              200: rgba(_raw('surface-dark-200'), 8%),
              300: rgba(_raw('surface-dark-300'), 12%),
              400: rgba(_raw('surface-dark-400'), 20%),
              600: rgba(_raw('surface-dark-600'), 33%)
            ),
          ),
          $disabled: (
            'default': var(--hs-theme-dp-white-alpha),
            'ink': var(--hs-theme-dp-white-alpha-ink)
          ),
          $background: (
            'default': hs-core.token-get('background-dark'),
            'ink': hs-core.token-get('background-dark-ink'),
          ),
        );
      }
    }
  }

  *,
  :before,
  :after {
    margin: 0;
    padding: 0;
    color: inherit;
    box-sizing: inherit;
    // border: 1px solid rgba(0 0 0 / 0);
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    font-family: inherit;
    font-size: inherit;
    font-weight: inherit;
    line-height: inherit;
  }

  p,
  span,
  a {
    font-family: hs-core.token-get('family-body');
    font-size: hs-core.token-get('size-body');
    font-weight: hs-core.token-get('weight-body');
    line-height: hs-core.token-get('line-height-body');
  }

  a {
    text-decoration: none;
  }

  li {
    list-style: none;
  }

  small {
    font-family: hs-core.token-get('family-small');
    font-size: hs-core.token-get('size-small');
    font-weight: hs-core.token-get('weight-small');
    line-height: hs-core.token-get('line-height-small');
  }

  code,
  code * {
    font-family: hs-core.token-get('family-mono');
    font-size: hs-core.token-get('size-mono');
    font-weight: hs-core.token-get('weight-mono');
    line-height: hs-core.token-get('line-height-mono');
  }

  dialog {
    all: unset;
  }

  html {
    width: 100%;
    height: 100%;
    font-size: 100%;
    background: hs-core.token-get('background');
    color: hs-core.token-get('background-ink');
    font-family: hs-core.token-get('family-body');
    box-sizing: border-box;
    color-scheme: light;

    @if $_dark-mode == 'class' {
      &.is-dark {
        color-scheme: dark;
        @include hs-core.token-config(
          $primary: (
            200: hs-core.token-get('primary-dark-200'),
            300: hs-core.token-get('primary-dark-300'),
            400: hs-core.token-get('primary-dark-400'),
            600: hs-core.token-get('primary-dark-600'),
            'ink': hs-core.token-get('primary-dark-ink'),
            'alpha': (
              200: rgba(_raw('primary-dark-200'), 8%),
              300: rgba(_raw('primary-dark-300'), 12%),
              400: rgba(_raw('primary-dark-400'), 20%),
              600: rgba(_raw('primary-dark-600'), 33%)
            ),
          ),
          $accent: (
            200: hs-core.token-get('accent-dark-200'),
            300: hs-core.token-get('accent-dark-300'),
            400: hs-core.token-get('accent-dark-400'),
            600: hs-core.token-get('accent-dark-600'),
            'ink': hs-core.token-get('accent-dark-ink'),
            'alpha': (
              200: rgba(_raw('accent-dark-200'), 8%),
              300: rgba(_raw('accent-dark-300'), 12%),
              400: rgba(_raw('accent-dark-400'), 20%),
              600: rgba(_raw('accent-dark-600'), 33%)
            ),
          ),
          $surface: (
            200: hs-core.token-get('surface-dark-200'),
            300: hs-core.token-get('surface-dark-300'),
            400: hs-core.token-get('surface-dark-400'),
            600: hs-core.token-get('surface-dark-600'),
            'ink': hs-core.token-get('surface-dark-ink'),
            'alpha': (
              200: rgba(_raw('surface-dark-200'), 8%),
              300: rgba(_raw('surface-dark-300'), 12%),
              400: rgba(_raw('surface-dark-400'), 20%),
              600: rgba(_raw('surface-dark-600'), 33%)
            ),
          ),
          $disabled: (
            'default': var(--hs-theme-dp-white-alpha),
            'ink': var(--hs-theme-dp-white-alpha-ink)
          ),
          $background: (
            'default': hs-core.token-get('background-dark'),
            'ink': hs-core.token-get('background-dark-ink'),
          ),
        );
      }
    }

    @if $_dark-mode == 'attribute' {
      &[hashi-theme='dark'],
      &[theme='dark'],
      &[data-theme='dark'] {
        color-scheme: dark;
        @include hs-core.token-config(
          $primary: (
            200: hs-core.token-get('primary-dark-200'),
            300: hs-core.token-get('primary-dark-300'),
            400: hs-core.token-get('primary-dark-400'),
            600: hs-core.token-get('primary-dark-600'),
            'ink': hs-core.token-get('primary-dark-ink'),
            'alpha': (
              200: rgba(_raw('primary-dark-200'), 8%),
              300: rgba(_raw('primary-dark-300'), 12%),
              400: rgba(_raw('primary-dark-400'), 20%),
              600: rgba(_raw('primary-dark-600'), 33%)
            ),
          ),
          $accent: (
            200: hs-core.token-get('accent-dark-200'),
            300: hs-core.token-get('accent-dark-300'),
            400: hs-core.token-get('accent-dark-400'),
            600: hs-core.token-get('accent-dark-600'),
            'ink': hs-core.token-get('accent-dark-ink'),
            'alpha': (
              200: rgba(_raw('accent-dark-200'), 8%),
              300: rgba(_raw('accent-dark-300'), 12%),
              400: rgba(_raw('accent-dark-400'), 20%),
              600: rgba(_raw('accent-dark-600'), 33%)
            ),
          ),
          $surface: (
            200: hs-core.token-get('surface-dark-200'),
            300: hs-core.token-get('surface-dark-300'),
            400: hs-core.token-get('surface-dark-400'),
            600: hs-core.token-get('surface-dark-600'),
            'ink': hs-core.token-get('surface-dark-ink'),
            'alpha': (
              200: rgba(_raw('surface-dark-200'), 8%),
              300: rgba(_raw('surface-dark-300'), 12%),
              400: rgba(_raw('surface-dark-400'), 20%),
              600: rgba(_raw('surface-dark-600'), 33%)
            ),
          ),
          $disabled: (
            'default': var(--hs-theme-dp-white-alpha),
            'ink': var(--hs-theme-dp-white-alpha-ink)
          ),
          $background: (
            'default': hs-core.token-get('background-dark'),
            'ink': hs-core.token-get('background-dark-ink'),
          ),
        );
      }
    }
  }

  @content;
}

@function _get-family($query) {
  $family: list.nth($query, 1);
  $type: list.nth($query, 2);
  @return ($family, $type);
}

@function _get-weight($query) {
  @return list.nth($query, 3);
}

@function _raw($query) {
  @return hs-core.token-get-raw($query);
}