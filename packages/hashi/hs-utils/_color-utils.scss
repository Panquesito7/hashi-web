///
//  Copyright (c) 2022 Dev Protocol
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
///

@use '../hs-core';
@use 'sass:list';
@use 'sass:string';
@use 'util-helpers' as helper;

$_colors: (
  'primary',
  'accent',
  'surface',
  'success',
  'warning',
  'danger'
);

$_valid-alphas: (
  'primary',
  'accent',
  'surface',
);

$_tones: (
  200: 8%,
  300: 12%,
  400: 20%,
  600: 33%
);

$_breakpoints: (
  'small': 'sm',
  'medium': 'md',
  'large': 'lg',
  'xlarge': 'xl',
);

@mixin color-utils($include: (), $exclude: ()) {
  @include color($include, $exclude);
}

@mixin color($include: (), $exclude: ()) {
  $utils-to-render: helper.handle-include-exclude(('bg', 'text', 'border'), $include, $exclude);
  // @debug $utils-to-render;

  @each $color in $_colors {
    @each $tone, $opacity in $_tones {
      @if list.index($utils-to-render, 'bg') {
        .bg-#{$color}-#{$tone} {
          background: hs-core.token-get('#{$color}-#{$tone}');
          color: hs-core.token-get('#{$color}-ink');
        }

        @each $breakpoint, $shorthand in $_breakpoints {
          @include hs-core.breakpoint-create($breakpoint) {
            .\@#{$shorthand}\:bg-#{$color}-#{$tone} {
              background: hs-core.token-get('#{$color}-#{$tone}');
              color: hs-core.token-get('#{$color}-ink');
            }
          }
        }

        .bg-#{$color}-alpha-#{$tone} {
          @if list.index($_valid-alphas, $color) {
            background: hs-core.token-get('#{$color}-alpha-#{$tone}');
          } @else {
            background: rgba(hs-core.token-get-raw('#{$color}-#{$tone}'), $opacity);
          }
        }

        @each $breakpoint, $shorthand in $_breakpoints {
          @include hs-core.breakpoint-create($breakpoint) {
            .\@#{$shorthand}\:bg-#{$color}-alpha-#{$tone} {
              @if list.index($_valid-alphas, $color) {
                background: hs-core.token-get('#{$color}-alpha-#{$tone}');
              } @else {
                background: rgba(hs-core.token-get-raw('#{$color}-#{$tone}'), $opacity);
              }
            }
          }
        }
      }

      @if list.index($utils-to-render, 'text') {
        .text-#{$color}-#{$tone} {
          color: hs-core.token-get('#{$color}-#{$tone}');
        }

        @each $breakpoint, $shorthand in $_breakpoints {
          @include hs-core.breakpoint-create($breakpoint) {
            .\@#{$shorthand}\:text-#{$color}-#{$tone} {
              color: hs-core.token-get('#{$color}-#{$tone}');
            }
          }
        }
      }

      @if list.index($utils-to-render, 'border') {
        .border-#{$color}-#{$tone} {
          border: 1px solid hs-core.token-get('#{$color}-#{$tone}');
        }

        @each $breakpoint, $shorthand in $_breakpoints {
          @include hs-core.breakpoint-create($breakpoint) {
            .\@#{$shorthand}\:border-#{$color}-#{$tone} {
              border: 1px solid hs-core.token-get('#{$color}-#{$tone}');
            }
          }
        }
      }
    }
  }
}