///
//  Copyright (c) 2022 Dev Protocol
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
///

@use '../hs-core';
@use 'sass:list';
@use 'sass:string';
@use 'util-helpers' as helper;

$_families: (
  'supertitle',
  'title',
  'subtitle',
  'body',
  'mono',
  'small'
);

$_sizes: (
  'xs',
  'sm',
  'md',
  'lg',
  'xl',
  '2xl',
  '3xl',
  '4xl',
  '5xl',
  '6xl',
);

$_weights: (
  'black',
  'bold',
  'normal',
  'light'
);

$_line-heights: (
  'broad',
  'normal',
  'condensed'
);

$_breakpoints: (
  'small': 'sm',
  'medium': 'md',
  'large': 'lg',
  'xlarge': 'xl',
);

$_alignments: (
  'left',
  'center',
  'right',
  'justify'
);

@mixin typography-utils($include: (), $exclude: ()) {
  @include typography($include, $exclude);
}

@mixin typography($include: (), $exclude: ()) {
  $utils-to-render: helper.handle-include-exclude((
    'preset',
    'family',
    'size',
    'weight',
    'lh',
    'text-align'
  ), $include, $exclude);

  @if list.index($utils-to-render, 'preset') {
    @each $preset in $_families {
      .#{$preset} {
        font-family: hs-core.token-get('#{$preset}-family');
        font-size: hs-core.token-get('#{$preset}-size');
        font-weight: hs-core.token-get('#{$preset}-weight');
        line-height: hs-core.token-get('#{$preset}-line-height');
      }

      @each $breakpoint, $shorthand in $_breakpoints {
        @include hs-core.breakpoint-create($breakpoint) {
          .\@#{$shorthand}\:#{$preset} {
            font-family: hs-core.token-get('#{$preset}-family');
            font-size: hs-core.token-get('#{$preset}-size');
            font-weight: hs-core.token-get('#{$preset}-weight');
            line-height: hs-core.token-get('#{$preset}-line-height');
          }
        }
      }
    }
  }

  @if list.index($utils-to-render, 'family') {
    @each $preset in $_families {
      .family-#{$preset} {
        font-family: hs-core.token-get('#{$preset}-family');
      }

      @each $breakpoint, $shorthand in $_breakpoints {
        @include hs-core.breakpoint-create($breakpoint) {
          .\@#{$shorthand}\:family-#{$preset} {
            font-family: hs-core.token-get('#{$preset}-family');
          }
        }
      }
    }
  }

  @if list.index($utils-to-render, 'size') {
    @each $size in $_sizes {
      .size-#{$size} {
        font-size: hs-core.primitive-token-get('size.#{$size}');
      }

      @each $breakpoint, $shorthand in $_breakpoints {
        @include hs-core.breakpoint-create($breakpoint) {
          .\@#{$shorthand}\:size-#{$size} {
            font-size: hs-core.primitive-token-get('size.#{$size}');
          }
        }
      }
    }
  }

  @if list.index($utils-to-render, 'weight') {
    @each $preset in $_weights {
      .weight-#{$preset} {
        font-weight: hs-core.primitive-token-get('weight.#{$preset}');
      }

      @each $breakpoint, $shorthand in $_breakpoints {
        @include hs-core.breakpoint-create($breakpoint) {
          .\@#{$shorthand}\:weight-#{$preset} {
            font-weight: hs-core.primitive-token-get('weight.#{$preset}');
          }
        }
      }
    }
  }

  @if list.index($utils-to-render, 'lh') {
    @each $preset in $_line-heights {
      .lh-#{$preset} {
        line-height: hs-core.primitive-token-get('line-height.#{$preset}');
      }

      @each $breakpoint, $shorthand in $_breakpoints {
        @include hs-core.breakpoint-create($breakpoint) {
          .\@#{$shorthand}\:lh-#{$preset} {
            line-height: hs-core.primitive-token-get('line-height.#{$preset}');
          }
        }
      }
    }
  }

  @if list.index($utils-to-render, 'text-align') {
    @each $preset in $_alignments {
      .text-align-#{$preset} {
        text-align: string.unquote($preset);
      }

      @each $breakpoint, $shorthand in $_breakpoints {
        @include hs-core.breakpoint-create($breakpoint) {
          .\@#{$shorthand}\:text-align-#{$preset} {
            text-align: string.unquote($preset);
          }
        }
      }
    }
  }
}