///
//  Copyright (c) 2022 Dev Protocol
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
///

@use '../hs-core';
@use 'sass:map';

@function _get-state($map, $state) {
  @return map.get($map, $state);
}

@mixin text-style($fills, $inks, $borders) {
  $fill: map.get($fills, 'default');
  $fill-disabled: map.get($fills, 'disabled');
  $ink-disabled: map.get($inks, 'disabled');
  $border: map.get($borders, 'default');

  &:not(.is-disabled) {
    &:not(:disabled) {
      @include hs-core.color-bind('button', (
        fill: transparent,
        ink: $fill,
        border: transparent
      ));

      &:hover {
        @include hs-core.color-bind('button', (
          fill: rgba(_raw($fill), hs-core.$color-fill-hover-opacity),
          ink: $fill,
          border: rgba(_raw($border), hs-core.$color-border-hover-opacity)
        ));
      }

      &:focus {
        @include hs-core.color-bind('button', (
          fill: rgba(_raw($fill), hs-core.$color-fill-focus-opacity),
          ink: $fill,
          border: rgba(_raw($border), hs-core.$color-border-focus-opacity)
        ));
      }

      &:active {
        @include hs-core.color-bind('button', (
          fill: rgba(_raw($fill), hs-core.$color-fill-active-opacity),
          ink: $fill,
          border: rgba(_raw($border), hs-core.$color-border-active-opacity)
        ));
      }
    }
  }

  &.is-disabled,
  &:disabled {
    @include hs-core.color-bind('button', (
      fill: transparent,
      ink: $ink-disabled,
      border: transparent
    ));
  }
}

@mixin outlined-style($fills, $inks, $borders) {
  $fill: map.get($fills, 'default');
  $fill-hover: map.get($fills, 'hover');
  $fill-focus: map.get($fills, 'focus');
  $fill-active: map.get($fills, 'active');
  $fill-disabled: map.get($fills, 'disabled');
  $ink: map.get($inks, 'default');
  $ink-disabled: map.get($inks, 'disabled');
  $border: map.get($borders, 'default');
  $border-hover: map.get($borders, 'hover');
  $border-focus: map.get($borders, 'focus');
  $border-active: map.get($borders, 'active');
  $border-disabled: map.get($borders, 'disabled');

  &:not(.is-disabled) {
    &:not(:disabled) {
      @include hs-core.color-bind('button', (
        fill: transparent,
        ink: $fill,
        border: $border
      ));

      &:focus {
        @include hs-core.color-bind('button', (
          fill: rgba(_raw($fill), hs-core.$color-fill-focus-opacity),
          ink: $fill,
          border: $border
        ));
      }

      &:hover {
        @include hs-core.color-bind('button', (
          fill: $fill-hover,
          ink: $ink,
          border: $border-hover
        ));
      }

      &:active {
        @include hs-core.color-bind('button', (
          fill: $fill-active,
          ink: $ink,
          border: $border-active
        ));
      }
    }
  }

  &.is-disabled,
  &:disabled {
    @include hs-core.color-bind('button', (
      fill: transparent,
      ink: $ink-disabled,
      border: $border-disabled
    ));
  }
}

@mixin filled-style($fills, $inks, $borders) {
  $fill: map.get($fills, 'default');
  $fill-hover: map.get($fills, 'hover');
  $fill-focus: map.get($fills, 'focus');
  $fill-active: map.get($fills, 'active');
  $fill-disabled: map.get($fills, 'disabled');
  $ink: map.get($inks, 'default');
  $ink-disabled: map.get($inks, 'disabled');
  $border: map.get($borders, 'default');
  $border-hover: map.get($borders, 'hover');
  $border-focus: map.get($borders, 'focus');
  $border-active: map.get($borders, 'active');
  $border-disabled: map.get($borders, 'disabled');

  &:not(.is-disabled) {
    &:not(:disabled) {
      @include hs-core.color-bind('button', (
        fill: $fill,
        ink: $ink,
        border: $border
      ));

      &:hover {
        @include hs-core.color-bind('button', (
          fill: $fill-hover,
          ink: $ink,
          border: $border-hover
        ));
      }

      &:focus {
        @include hs-core.color-bind('button', (
          fill: $fill-focus,
          ink: $ink,
          border: $border-focus
        ));
      }

      &:active {
        @include hs-core.color-bind('button', (
          fill: $fill-active,
          ink: $ink,
          border: $border-active
        ));
      }
    }
  }

  &.is-disabled,
  &:disabled {
    @include hs-core.color-bind('button', (
      fill: $fill-disabled,
      ink: $ink-disabled,
      border: $border-disabled
    ));
  }
}

@function _raw($query) {
  @return hs-core.token-get-raw($query);
}