///
//  Copyright (c) 2022 Dev Protocol
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
///

@use '../hs-core';

$_breakpoints: (
  'small': 'sm',
  'medium': 'md',
  'large': 'lg',
  'xlarge': 'xl',
);

$_dimensions: (
  'none': 0,
  'quarter': 25%,
  'third': 33.333333%,
  'half': 50%,
  'full': 100%,
  'screen': 100vh
);

$shape-presets: (
  'none',
  'xs',
  'sm',
  'md',
  'lg',
  'xl',
  'pill'
);

$radius-directions: (
  'tl': top-left,
  'tr': top-right,
  'br': bottom-right,
  'bl': bottom-left,
  't': (top-left, top-right),
  'l': (top-left, bottom-left),
  'b': (bottom-left, bottom-right),
  'r': (top-right, bottom-right),
);

$directions: (
  't': top,
  'l': left,
  'b': bottom,
  'r': right,
  'x': (left, right),
  'y': (top, bottom)
);

$_elevations: (
  'none',
  'low',
  'normal',
  'high',
  'highest',
);

@mixin shape-utils() {
  @each $dimension, $dimension-val in $_dimensions {
    .w-#{$dimension} {
      width: $dimension-val;
    }
  
    @each $breakpoint, $shorthand in $_breakpoints {
      @include hs-core.breakpoint-create($breakpoint) {
        .\@#{$shorthand}\:w-#{$dimension} {
          width: $dimension-val;
        }
      }
    }
  
    .h-#{$dimension} {
      height: $dimension-val;
    }
  
    @each $breakpoint, $shorthand in $_breakpoints {
      @include hs-core.breakpoint-create($breakpoint) {
        .\@#{$shorthand}\:h-#{$dimension} {
          height: $dimension-val;
        }
      }
    }
  }
  
  @each $elevation in $_elevations {
    @if $elevation == 'normal' or $elevation == 'default' {
      .shadow {
        box-shadow: hs-core.token-get('shadow-#{$elevation}');
      }
    } @else {
      .shadow-#{$elevation} {
        box-shadow: hs-core.token-get('shadow-#{$elevation}');
      }
    }
  }
  
  @each $shape-preset in $shape-presets {
    .r-#{$shape-preset} {
      border-radius: hs-core.token-get('radius-#{$shape-preset}');
    }
  
    @each $breakpoint, $shorthand in $_breakpoints {
      @include hs-core.breakpoint-create($breakpoint) {
        .\@#{$shorthand}\:r-#{$shape-preset} {
          border-radius: hs-core.token-get('radius-#{$shape-preset}');
        }
      }
    }
    
    @each $direction-id, $directions in $radius-directions {
      .r#{$direction-id}-#{$shape-preset} {
        @each $direction in $directions {
          border-#{$direction}-radius: hs-core.token-get('radius-#{$shape-preset}');
        }
      }
  
      @each $breakpoint, $shorthand in $_breakpoints {
        @include hs-core.breakpoint-create($breakpoint) {
          .\@#{$shorthand}\:r#{$direction-id}-#{$shape-preset} {
            @each $direction in $directions {
              border-#{$direction}-radius: hs-core.token-get('radius-#{$shape-preset}');
            }
          }
        }
      }
    }
  }
  
  @each $shape-preset in $shape-presets {
    .p-#{$shape-preset} {
      padding: hs-core.token-get('padding-#{$shape-preset}');
    }
  
    @each $breakpoint, $shorthand in $_breakpoints {
      @include hs-core.breakpoint-create($breakpoint) {
        .\@#{$shorthand}\:p-#{$shape-preset} {
          padding: hs-core.token-get('padding-#{$shape-preset}');
        }
      }
    }
    
    @each $direction-id, $directions in $directions {
      .p#{$direction-id}-#{$shape-preset} {
        @each $direction in $directions {
          padding-#{$direction}: hs-core.token-get('padding-#{$shape-preset}');
        }
      }
  
      @each $breakpoint, $shorthand in $_breakpoints {
        @include hs-core.breakpoint-create($breakpoint) {
          .\@#{$shorthand}\:p#{$direction-id}-#{$shape-preset} {
            @each $direction in $directions {
              padding-#{$direction}: hs-core.token-get('padding-#{$shape-preset}');
            }
          }
        }
      }
    }
  }
  
  @each $shape-preset in $shape-presets {
    .m-#{$shape-preset} {
      margin: hs-core.token-get('margin-#{$shape-preset}');
    }
    
    @each $breakpoint, $shorthand in $_breakpoints {
      @include hs-core.breakpoint-create($breakpoint) {
        .\@#{$shorthand}\:m-#{$shape-preset} {
          margin: hs-core.token-get('margin-#{$shape-preset}');
        }
      }
    }
    
    
    @each $direction-id, $directions in $directions {
      .m#{$direction-id}-#{$shape-preset} {
        @each $direction in $directions {
          margin-#{$direction}: hs-core.token-get('margin-#{$shape-preset}');
        }
      }
  
      @each $breakpoint, $shorthand in $_breakpoints {
        @include hs-core.breakpoint-create($breakpoint) {
          .\@#{$shorthand}\:m#{$direction-id}-#{$shape-preset} {
            @each $direction in $directions {
              margin-#{$direction}: hs-core.token-get('margin-#{$shape-preset}');
            }
          }
        }
      }
    }
  }
}