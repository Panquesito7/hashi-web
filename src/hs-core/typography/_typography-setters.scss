///
//  Copyright (c) 2022 Dev Protocol
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
///

@use 'sass:map';
@use 'sass:list';

@use '../theme';
@use '../tools';

/// Required component props
/// @access private
$_valid-props: ('family', 'size', 'weight', 'line-height');

/// Base mixin for apply() and bind()
/// @access private
@mixin _base($component, $theme, $settings: ()) {
  $_init-settings: ('intent': create);
  $_settings: map.merge($_init-settings, $settings);
  
  /// @type string
  $intent: map.get($_settings, 'intent');
  
  $family: map.get($theme, 'family');
  $size: map.get($theme, 'size');
  $weight: map.get($theme, 'weight');
  $line-height: map.get($theme, 'line-height');
  
  @if $family {
    @include family($component, $family, $intent);
  }
  @if $size {
    @include size($component, $size, $intent);
  }
  @if $weight {
    @include weight($component, $weight, $intent);
  }
  @if $line-height {
    @include line-height($component, $line-height, $intent);
  }
}

/// Mixin for applying font families.
/// @param {string} $component
/// @param {token|color} $family
/// @param {string} $intent
/// @return {void} font family styles.
@mixin family($component, $family, $intent: 'create') {
  @include theme.property(
    font-family,
    ('#{$component}-family', theme.token-switch('family-#{$family}')),
    $intent
  );
}

/// Mixin for applying font sizes.
/// @param {string} $component
/// @param {token|color} $size
/// @param {string} $intent
/// @return {void} font size styles.
@mixin size($component, $size, $intent: 'create') {
  @include theme.property(
    font-size,
    ('#{$component}-size', theme.token-switch('size-#{$size}')),
    $intent
  );
}

/// Mixin for applying font weights.
/// @param {string} $component
/// @param {token|color} $weight
/// @param {string} $intent
/// @return {void} font weight styles.
@mixin weight($component, $weight, $intent: 'create') {
  @include theme.property(
    font-weight,
    ('#{$component}-weight', theme.token-switch('weight-#{$weight}')),
    $intent
  );
}

/// Mixin for applying line heights.
/// @param {string} $component
/// @param {token|color} $line-height
/// @param {string} $intent
/// @return {void} line height styles.
@mixin line-height($component, $line-height, $intent: 'create') {
  @include theme.property(
    line-height,
    ('#{$component}-line-height', theme.token-switch('line-height-#{$line-height}')),
    $intent
  );
}

/// Mixin that applies typography styles to a component.
/// @param {string} $component
/// @param {map<string, string>} $theme
/// @return {void} void.
@mixin apply($component, $theme) {
  @include _base($component, $theme);
}

/// Mixin that binds typography styles to a component with existing keys.
/// @param {string} $component
/// @param {map<string, string>} $theme
/// @return {void} void.
@mixin bind($component, $theme) {
  @include _base($component, $theme, (
    'intent': create
  ));
}