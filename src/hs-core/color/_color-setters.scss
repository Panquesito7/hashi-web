///
//  Copyright (c) 2022 Dev Protocol
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
///

@use 'sass:map';
@use 'sass:list';

@use '../theme';
@use '../tools';

/// Required component props
/// @access private
$_required-props: ('fill', 'ink', 'border');

/// Base mixin for apply() and bind()
/// @access private
@mixin _base($component, $theme, $style, $settings: ()) {
  $_init-settings: (
    'stateful': false,
    'bind-mode': false,
    'tone': 400,
  );
  $_settings: map.merge($_init-settings, $settings);
  
  /// @type bool
  $stateful: map.get($_settings, 'stateful');
  /// @type bool
  $extend: map.get($_settings, 'bind-mode');
  /// @type number
  $tone: map.get($_settings, 'tone');
  
  @if tools.is-type('map', $theme) {
    @if not map.keys($theme) == $_required-props {
      @error "Missing required $theme props.";
    }
    
    @if $style == text {
      @include _text-style($component, $theme, $stateful, $tone, $extend);
    }
    
    @if $style == outlined {
      @include _outlined-style($component, $theme, $stateful, $tone, $extend);
    }
    
    @if $style == filled {
      @include _filled-style($component, $theme, $stateful, $tone, $extend);
    }
  }
}

/// Text style mixin
/// @access private
@mixin _text-style($component, $theme, $stateful: false, $tone: '400', $extend: false) {
  $fill: map.get($theme, 'fill');
  
  @if $extend {
    @include theme.key-bind('#{$component}-fill', rgba(0 0 0 / 0));
    @if $fill {
      @include theme.key-bind('#{$component}-ink', theme.token-get('#{$fill}-#{$tone}'));
    }
    @include theme.key-bind('#{$component}-border', rgba(0 0 0 / 0));
  } @else {
    background: theme.key-create('#{$component}-fill', rgba(0 0 0 / 0));
    @if $fill {
      color: theme.key-create('#{$component}-ink', theme.token-get('#{$fill}-#{$tone}'));
    }
    border: 1px solid theme.key-create('#{$component}-border', rgba(0 0 0 / 0));
  }
  
  @if $stateful == true {
    &:hover {
      @if $fill {
        @include theme.key-bind('#{$component}-fill', rgba(theme.token-get-raw('#{$fill}-400'), 20%));
      }
      @if $fill {
        @include theme.key-bind('#{$component}-ink', theme.token-get('#{$fill}-#{$tone}'));
      }
      @if $fill {
        @include theme.key-bind('#{$component}-border', rgba(theme.token-get-raw('#{$fill}-400'), 2%));
      }
    }
    
    &:focus {
      @if $fill {
        @include theme.key-bind('#{$component}-fill', rgba(theme.token-get-raw('#{$fill}-400'), 20%));
      }
      @if $fill {
        @include theme.key-bind('#{$component}-ink', theme.token-get('#{$fill}-#{$tone}'));
      }
      @if $fill {
        @include theme.key-bind('#{$component}-border', rgba(theme.token-get-raw('#{$fill}-400'), 2%));
      }
    }
    
    &:active {
      @if $fill {
        @include theme.key-bind('#{$component}-fill', rgba(theme.token-get-raw('#{$fill}-400'), 33%));
      }
      @if $fill {
        @include theme.key-bind('#{$component}-ink', theme.token-get('#{$fill}-#{$tone}'));
      }
      @if $fill {
        @include theme.key-bind('#{$component}-border', rgba(theme.token-get-raw('#{$fill}-400'), 3.3%));
      }
    }
    
    &:disabled {
      @include theme.key-bind('#{$component}-ink', theme.token-get('disabled-ink'));
      
      &:hover,
      &:active,
      &:focus {
        @include theme.key-bind('#{$component}-fill', rgba(0 0 0 / 0));
        @include theme.key-bind('#{$component}-ink', theme.token-get('disabled-ink'));
        @include theme.key-bind('#{$component}-border', rgba(0 0 0 / 0));
      }
    }
  }
}

/// Outlined style mixin
/// @access private
@mixin _outlined-style($component, $theme, $stateful: false, $tone: '400', $extend: false) {
  $fill: map.get($theme, 'fill');
  $ink: map.get($theme, 'ink');
  $border: map.get($theme, 'border');
  
  @if $extend {
    @include theme.key-bind('#{$component}-fill', rgba(0 0 0 / 0));
    @if $ink {
      @include theme.key-bind('#{$component}-ink', theme.token-get('#{$fill}-#{$tone}'));
    }
    @if $border {
      @include theme.key-bind('#{$component}-border', theme.token-get('#{$border}-#{$tone}'));
    }
  } @else {
    background: theme.key-create('#{$component}-fill', rgba(0 0 0 / 0));
    @if $ink {
      color: theme.key-create('#{$component}-ink', theme.token-get('#{$fill}-#{$tone}'));
    }
    @if $border {
      border: 1px solid theme.key-create('#{$component}-border', theme.token-get('#{$border}-#{$tone}'));
    }
  }
  
  @if $stateful == true {
    &:focus {
      @if $fill {
        @include theme.key-bind('#{$component}-fill', rgba(theme.token-get-raw('#{$fill}-400'), 20%));
      }
      @if $fill {
        @include theme.key-bind('#{$component}-ink', theme.token-get('#{$fill}-#{$tone}'));
      }
      @if $border {
        @include theme.key-bind('#{$component}-border', theme.token-get('#{$border}-#{$tone}'));
      }
    }
  
    &:hover {
      @if $fill {
        @include theme.key-bind('#{$component}-fill', theme.token-get('#{$fill}-#{$tone}'));
      }
      @if $fill {
        @include theme.key-bind('#{$component}-ink', theme.token-get($ink));
      }
      @if $border {
        @include theme.key-bind('#{$component}-border', theme.token-get('#{$border}-#{$tone}'));
      }
    }
    
    &:active {
      @if $fill {
        @include theme.key-bind('#{$component}-fill', theme.token-get('#{$fill}-200'));
      }
      @if $ink {
        @include theme.key-bind('#{$component}-ink', theme.token-get($ink));
      }
      @if $border {
        @include theme.key-bind('#{$component}-border', theme.token-get('#{$border}-200'));
      }
    }
    
    &:disabled {
      @include theme.key-bind('#{$component}-ink', theme.token-get('disabled-ink'));
      @include theme.key-bind('#{$component}-border', theme.token-get('disabled-ink'));
      
      &:hover,
      &:active,
      &:focus {
        @include theme.key-bind('#{$component}-fill', rgba(0 0 0 / 0));
        @include theme.key-bind('#{$component}-ink', theme.token-get('disabled-ink'));
        @include theme.key-bind('#{$component}-border', theme.token-get('disabled-ink'));
      }
    }
  }
}

/// Filled style mixin
/// @access private
@mixin _filled-style($component, $theme, $stateful: false, $tone: '400', $extend: false) {
  $fill: map.get($theme, 'fill');
  $ink: map.get($theme, 'ink');
  $border: map.get($theme, 'border');
  
  @if $extend {
    @if $fill {
      @include theme.key-bind('#{$component}-fill', theme.token-get('#{$fill}-#{$tone}'));
    }
    @if $ink {
      @include theme.key-bind('#{$component}-ink', theme.token-get($ink));
    }
    @if $border {
      @include theme.key-bind('#{$component}-border', theme.token-get('#{$border}-#{$tone}'));
    }
  } @else {
    @if $fill {
      background: theme.key-create('#{$component}-fill', theme.token-get('#{$fill}-#{$tone}'));
    }
    @if $ink {
      color: theme.key-create('#{$component}-ink', theme.token-get($ink));
    }
    @if $border {
      border: 1px solid theme.key-create('#{$component}-border', theme.token-get('#{$border}-#{$tone}'));
    }
  }
  
  @if $stateful == true {
    &:hover {
      @if $fill {
        @include theme.key-bind('#{$component}-fill', theme.token-get('#{$fill}-#{$tone}'));
      }
      @if $ink {
        @include theme.key-bind('#{$component}-ink', theme.token-get($ink));
      }
      @if $border {
        @include theme.key-bind('#{$component}-border', theme.token-get('#{$border}-#{$tone}'));
      }
    }
    
    &:focus {
      @if $fill {
        @include theme.key-bind('#{$component}-fill', theme.token-get('#{$fill}-#{$tone}'));
      }
      @if $ink {
        @include theme.key-bind('#{$component}-ink', theme.token-get($ink));
      }
      @if $border {
        @include theme.key-bind('#{$component}-border', theme.token-get('#{$border}-#{$tone}'));
      }
    }
    
    &:active {
      @if $fill {
        @include theme.key-bind('#{$component}-fill', theme.token-get('#{$fill}-200'));
      }
      @if $ink {
        @include theme.key-bind('#{$component}-ink', theme.token-get($ink));
      }
      @if $border {
        @include theme.key-bind('#{$component}-border', theme.token-get('#{$fill}-200'));
      }
    }
    
    &:disabled {
      @include theme.key-bind('#{$component}-fill', theme.token-get('disabled'));
      @include theme.key-bind('#{$component}-ink', theme.token-get('disabled-ink'));
      @include theme.key-bind('#{$component}-border', theme.token-get('disabled-ink'));
      
      &:hover,
      &:active,
      &:focus {
        @include theme.key-bind('#{$component}-fill', theme.token-get('disabled'));
        @include theme.key-bind('#{$component}-ink', theme.token-get('disabled-ink'));
        @include theme.key-bind('#{$component}-border', theme.token-get('disabled-ink'));
      }
    }
  }
}

/// Mixin that applies colors to a component.
/// @param {string} $component
/// @param {map<string, string>} $theme
/// @param {string} $style
/// @param {boolean} $stateful
/// @param {number} $tone
/// @return {void} void.
@mixin apply($component, $theme, $style, $stateful: false, $tone: 400) {
  @include _base($component, $theme, $style, (
    'stateful': $stateful,
    'tone': $tone
  ));
}

/// Mixin that binds colors to a component with existing keys.
/// @param {string} $component
/// @param {map<string, string>} $theme
/// @param {string} $style
/// @param {boolean} $stateful
/// @param {number} $tone
/// @return {void} void.
@mixin bind($component, $theme, $style, $stateful: false, $tone: 400) {
  @include _base($component, $theme, $style, (
    'stateful': $stateful,
    'tone': $tone,
    'bind-mode': true
  ));
}