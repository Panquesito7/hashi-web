///
//  Copyright (c) 2022 Dev Protocol
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
///

@use 'sass:map';
@use 'sass:list';

@use '../theme';
@use '../tools';

// TODO: Use new color setters API.

/// Required component props
/// @access private
$_valid-props: ('fill', 'ink', 'border');

$fill-default-opacity: 0%;
$fill-hover-opacity: 20%;
$fill-focus-opacity: 20%;
$fill-active-opacity: 33%;

$border-default-opacity: 0%;
$border-hover-opacity: 2%;
$border-focus-opacity: 2%;
$border-active-opacity: 3.3%;

/// Base mixin for apply() and bind()
/// @access private
@mixin _base($component, $theme, $settings: ()) {
  $_init-settings: ('intent': create);
  $_settings: map.merge($_init-settings, $settings);
  
  /// @type string
  $intent: map.get($_settings, 'intent');
  
  $fill: map.get($theme, 'fill');
  $ink: map.get($theme, 'ink');
  $border: map.get($theme, 'border');
  
  @if not tools.is-type('map', $theme) {
    @error '$theme is expecting a map. Map was not given.';
  } @else {
    $keys: map.keys($theme);
    @each $key in $keys {
      @if not list.index($_valid-props, $key) {
        @error 'Invalid/unrecognized prop: #{$key}. Please use one of the following props: #{$_valid-props}.'
      }
    }
    @if $fill {
      @include fill($component, $fill, $intent);
    }
    @if $ink {
      @include ink($component, $ink, $intent);
    }
    @if $border {
      @include border($component, $border, $intent);
    }
  }
}

/// Mixin for applying background colors.
/// @param {string} $component
/// @param {token|color} $color
/// @param {string} $intent
/// @return {void} background color styles.
@mixin fill($component, $color, $intent: 'create') {
  @include _validate-color($color) {
    @include theme.property(
      background-color,
      ('#{$component}-fill', theme.token-switch($color)),
      $intent
    );
  }
}

/// Mixin for applying text colors.
/// @param {string} $component
/// @param {token|color} $color
/// @param {string} $intent
/// @return {void} text color styles.
@mixin ink($component, $color, $intent: 'create') {
  @include _validate-color($color) {
    @include theme.property(
      color,
      ('#{$component}-ink', theme.token-switch($color)),
      $intent
    );
  }
}

/// Mixin for applying border colors.
/// @param {string} $component
/// @param {token|color} $color
/// @param {string} $intent
/// @return {void} border color styles.
@mixin border($component, $color, $intent: 'create') {
  @include _validate-color($color) {
    @include theme.property(
      border-color,
      ('#{$component}-border', theme.token-switch($color)),
      $intent
    );
  }
}

/// Mixin that applies colors to a component.
/// @param {string} $component
/// @param {map<string, string>} $theme
/// @param {string} $style
/// @param {boolean} $stateful
/// @param {number} $tone
/// @return {void} void.
@mixin apply($component, $theme) {
  @include _base($component, $theme);
}

/// Mixin that binds colors to a component with existing keys.
/// @param {string} $component
/// @param {map<string, string>} $theme
/// @param {string} $style
/// @param {boolean} $stateful
/// @param {number} $tone
/// @return {void} void.
@mixin bind($component, $theme) {
  @include _base($component, $theme, (
    'intent': bind
  ));
}

/// Validates a color query.
/// @access private
@mixin _validate-color($color) {
  $_valid-colors: (
    inherit,
    currentColor,
    transparent,
    rgba(0, 0, 0, 0),
    rgba(0 0 0 / 0)
  );
  
  @if not theme.token-check($color) or
    not list.index($_valid-colors, $color) {
    // TODO: Fix this error.
    // @error "Invalid color: #{$color}! Please use a valid color token, or the following: #{$_valid-colors}.";
  }
  
  @content;
}