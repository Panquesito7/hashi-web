//
//  Copyright (c) 2021 Dev Protocol
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
//

@use '../hs-core';
@use 'button-base';
@use 'sass:map';
@use 'sass:list';

$_init-settings: (
    variants: 'all',
    color-presets: 'all'
);

$c-presets: hs-core.$color-presets;

@mixin render($settings: ()) {
    @include button-base.init() {
        $_merged-settings: map.merge($_init-settings, $settings);
        $variants: map.get($_merged-settings, 'variants');
        $color-presets: map.get($_merged-settings, 'color-presets');
        
        @if list.index($variants, 'text') or list.index($variants, 'all') {
            @if $color-presets == 'all' {
                @each $preset, $props in $c-presets {
                    &.#{$preset} {
                        @include hs-core.color-override('button', $preset, 'text', true);
                    }
                }
            } @else {
                @each $preset, $props in $color-presets {
                    &.#{$preset} {
                        @include hs-core.color-override('button', $preset, 'text', true);
                    }
                }
            }
        }
    
        &.hs-button--outlined {
            background: hs-core.theme-key-create('button-fill', rgba(0 0 0 / 0));
            color: hs-core.theme-key-create('button-ink', #000);
            border: 1px solid hs-core.theme-key-create('button-border', #000);
    
            @if list.index($variants, 'outlined') or list.index($variants, 'all') {
                @if $color-presets == 'all' {
                    @each $preset, $props in $c-presets {
                        &.#{$preset} {
                            @include hs-core.color-override('button', $preset, 'outlined', true);
                        }
                    }
                } @else {
                    @each $preset, $props in $color-presets {
                        &.#{$preset} {
                            @include hs-core.color-override('button', $preset, 'outlined', true);
                        }
                    }
                }
            }
        }
    
        &.hs-button--filled {
            background: hs-core.theme-key-create('button-fill', #000);
            color: hs-core.theme-key-create('button-ink', #fff);
            border: 1px solid hs-core.theme-key-create('button-border', #000);
    
            @if list.index($variants, 'filled') or list.index($variants, 'all') {
                @if $color-presets == 'all' {
                    @each $preset, $props in $c-presets {
                        &.#{$preset} {
                            @include hs-core.color-override('button', $preset, 'filled', true);
                        }
                    }
                } @else {
                    @each $preset, $props in $color-presets {
                        &.#{$preset} {
                            @include hs-core.color-override('button', $preset, 'filled', true);
                        }
                    }
                }
            }
        }
    }
}
