//
//  Copyright (c) 2021 Dev Protocol
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
//

@use '../hs-core';
@use 'button-base';
@use 'sass:map';
@use 'sass:list';

$_init-color: (
    default: 'scarlet',
);

$_init-shape: (
    radius: 'xs',
    padding: 'sm',
);

$_init-type: (
    family: 'action',
    size: 'button',
    weight: 'button',
    line-height: 'button'
);

$_init-settings: (
    variants: 'all',
);

// $core-color-presets: hs-core.$color-presets;

@mixin render(
    $color: (),
    $shape: (),
    $type: (),
    $settings: ()
) {
    $_merged-color: map.merge($_init-color, $color);
    $_merged-shape: map.merge($_init-shape, $shape);
    $_merged-type: map.merge($_init-type, $type);
    $_merged-settings: map.merge($_init-settings, $settings);
    
    $default-color: map.get($_merged-color, 'default');
    $color-map: (
        fill: $default-color,
        ink: '#{$default-color}-ink',
        border: $default-color
    );
    
    $radius: map.get($_merged-shape, 'radius');
    $padding: map.get($_merged-shape, 'padding');
    
    $type-family: map.get($_merged-type, 'family');
    $type-size: map.get($_merged-type, 'size');
    $type-weight: map.get($_merged-type, 'weight');
    $type-line-height: map.get($_merged-type, 'line-height');
    
    $variants: map.get($_merged-settings, 'variants');
    
    @include button-base.init() {
        background: hs-core.theme-key-create('button-fill', rgba(0 0 0 / 0));
        color: hs-core.theme-key-create('button-ink', hs-core.theme-token-get('#{$default-color}-400'));
        border: 1px solid hs-core.theme-key-create('button-border', rgba(0 0 0 / 0));
        outline: none;
    
        border-radius: hs-core.theme-key-create('button-radius', hs-core.theme-token-get('radius-#{$radius}'));
        padding: hs-core.theme-key-create('button-padding', hs-core.theme-token-get('padding-#{$padding}'));
    
        font-family: hs-core.theme-key-create('button-family', hs-core.theme-token-get('family-action'));
        font-size: hs-core.theme-key-create('button-size', hs-core.theme-token-get('size-#{$type-size}'));
        font-weight: hs-core.theme-key-create('button-weight', hs-core.theme-token-get('weight-#{$type-weight}'));
        line-height: hs-core.theme-key-create('button-line-height', hs-core.theme-token-get('line-height-#{$type-line-height}'));
        
        @if list.index($variants, 'text') or list.index($variants, 'all') {
            @include hs-core.color-apply('button', $color-map, 'text', true);
        }
    
        &.hs-button--outlined {
            background: hs-core.theme-key-create('button-fill', rgba(0 0 0 / 0));
            color: hs-core.theme-key-create('button-ink', hs-core.theme-token-get('#{$default-color}-400'));
            border: 1px solid hs-core.theme-key-create('button-border', hs-core.theme-token-get('#{$default-color}-400'));
    
            @if list.index($variants, 'outlined') or list.index($variants, 'all') {
                @include hs-core.color-apply('button', $color-map, 'outlined', true);
            }
        }
    
        &.hs-button--filled {
            background: hs-core.theme-key-create('button-fill', hs-core.theme-token-get('#{$default-color}-400'));
            color: hs-core.theme-key-create('button-ink', hs-core.theme-token-get('#{$default-color}-ink'));
            border: 1px solid hs-core.theme-key-create('button-border', hs-core.theme-token-get('#{$default-color}-400'));
    
            @if list.index($variants, 'filled') or list.index($variants, 'all') {
                @include hs-core.color-apply('button', $color-map, 'filled', true);
            }
        }
    }
}
